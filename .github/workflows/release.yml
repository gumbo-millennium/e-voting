name: Deploy release

on:
  release:
    types:
      - published

env:
  # Docker tags
  RELEASE_TAG: ${{ github.event.release.tag_name }}
  RELEASE_HASH: ${{ github.sha }}

  # Google Container Repository values
  PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
  SERVICE: evoting
  GCR_REGION: eu

  # Terraform values
  TF_VAR_project: ${{ secrets.GOOGLE_PROJECT_ID }}
  TF_VAR_container_name: evoting
  TF_VAR_container_version:  ${{ github.sha }}
  TF_VAR_container_region: eu
  TF_VAR_app_prefix: vote2021-release

  # Dummy app key
  APP_KEY: base64:8fzvICpJu/KQi7u4kP59hU6stPTYDSx+ftkyR2z5do0=

jobs:
  build-frontend:
    name: "Build application front-end"
    runs-on: "ubuntu-latest"

    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: '8.0'
          extensions: json, mbstring, dom, fileinfo, mysql
          coverage: none

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node dependencies
        run: npm clean-install

      - name: Build Front-end
        run: npm run-script build

      - name: Copy environment config
        run: cp .github/actions.env .env

      - name: Install Composer dependencies
        uses: ramsey/composer-install@v1
        with:
          composer-options: "--ignore-platform-req=php --no-dev"

      - name: Create Docker error files
        run: php artisan docker:prepare-pages

      - name: Publish front-end
        uses: actions/upload-artifact@v2
        with:
          name: frontend
          path: |
            public/css
            public/images
            public/js
            public/mix-manifest.json

  build-github-image:
    name: "Build Docker image for GitHub"
    runs-on: ubuntu-latest
    needs:
      - build-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download front-end
        uses: actions/download-artifact@v2
        with:
          name: frontend
          path: public/

      - name: Build image for GitHub
        run: |
          docker build \
            --tag docker.pkg.github.com/gumbo-millennium/e-voting/app:${RELEASE_HASH:-latest} \
            --tag docker.pkg.github.com/gumbo-millennium/e-voting/app:${RELEASE_TAG:-latest} \
            --tag docker.pkg.github.com/gumbo-millennium/e-voting/app:latest \
            --file .cloud/Dockerfile \
            --progress plain \
            --target main \
            .

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push newly created tag
        run: |
          docker push docker.pkg.github.com/gumbo-millennium/e-voting/app:${RELEASE_HASH:-latest}
          docker push docker.pkg.github.com/gumbo-millennium/e-voting/app:${RELEASE_TAG:-latest}
          docker push docker.pkg.github.com/gumbo-millennium/e-voting/app:latest

  build-gcr-image:
    name: "Build Docker image for Google Container Registry"
    runs-on: ubuntu-latest
    needs:
      - build-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download front-end
        uses: actions/download-artifact@v2
        with:
          name: frontend
          path: public/

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build Google Cloud Run image
        run: |
          docker build \
            --tag ${GCR_REGION}.gcr.io/${PROJECT_ID}/${SERVICE}:${RELEASE_HASH:-latest} \
            --tag ${GCR_REGION}.gcr.io/${PROJECT_ID}/${SERVICE}:${RELEASE_TAG:-latest} \
            --tag ${GCR_REGION}.gcr.io/${PROJECT_ID}/${SERVICE}:latest \
            --file .cloud/Dockerfile \
            --progress plain \
            --target google-cloud-run \
            .

      - name: Push image to Google Container Registry
        run: |
          docker push ${GCR_REGION}.gcr.io/${PROJECT_ID}/${SERVICE}:${RELEASE_HASH:-latest}
          docker push ${GCR_REGION}.gcr.io/${PROJECT_ID}/${SERVICE}:${RELEASE_TAG:-latest}
          docker push ${GCR_REGION}.gcr.io/${PROJECT_ID}/${SERVICE}:latest

  deploy-terraform:
    name: "Deploy Terraform application"
    runs-on: ubuntu-latest

    needs:
      - build-gcr-image

    uses: gumbo-millennium/e-voting/.github/workflows/terraform-deploy.yml@master
    with:
      version: ${{ github.sha }}
    secrets:
      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      GOOGLE_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
      TERRAFORM_CLI_TOKEN: ${{ secrets.TERRAFORM_CLI_TOKEN }}
